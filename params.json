{"name":"Schript","tagline":"JS designed for Macros.","body":"# Schript\r\nSchript will be a JavaScript dialect made more uniform, like Scheme. This allows for user-defined macros to work in a natural way; this is the primary motivation of the project.\r\n\r\n## Syntax\r\n### Definitions\r\n\r\n```javascript\r\ndefun(fact, n) {\r\n\tif(n) {\r\n\t\t*(n,fact(n-1))\r\n\t} {\r\n\t\treturn(1)\r\n\t}\r\n}\r\n```\r\n\r\n```javascript\r\ndefine(x, 5)\r\n```\r\n\r\n### Invocation\r\n\r\n```javascript\r\nwrite(\"Hello, World\")\r\n```\r\n\r\n### Macros\r\nMacros have been implemented to allow syntax definition within programs. The following defines a `let` macro which will serve to define a variable over the scope of a block.\r\n\r\n```javascript\r\ndefmacro(let, name, val, expr) {\r\n\tdefun(tmp, `name) {\r\n\t\treturn(`expr)\r\n\t}\r\n\ttmp(`val)\r\n}\r\nlet(a, 56) {\r\n\twrite(a)\r\n}\r\n```\r\n\r\nNote the back-tick notation which denotes an expression as a value to be inserted into the returned syntax; all other expressions are evaluated upon invocation of the macro.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}